<Defs>

  <AM.AnimDef Name="AnimDuelBase" Abstract="True">
    <label>Duel</label>
    <type>Duel</type>
    <jobString>Dueling [OTHER].</jobString>
    <pawnCount>2</pawnCount>
    <cellData>
      <li>
        <type>PawnStart</type>
        <position>(0, 0)</position>
        <pawnIndex>0</pawnIndex>
      </li>
      <li>
        <type>PawnStart</type>
        <position>(1, 0)</position>
        <pawnIndex>1</pawnIndex>
      </li>
    </cellData>
    <canEditProbability>false</canEditProbability>
  </AM.AnimDef>

  <AM.AnimDef ParentName="AnimDuelBase">
    <defName>AM_Duel_Swords</defName>

    <!-- Two long weapons: -->
    <weaponFilter Class="AM.Reqs.AnyType">
      <types>Long_Blunt, Long_Stab, Long_Sharp</types>
    </weaponFilter>

    <data>Duel_Swords.json</data>
  </AM.AnimDef>

  <AM.AnimDef ParentName="AnimDuelBase">
    <defName>AM_Duel_WinFriendlyDuel</defName>
    <label>Win Friendly Duel</label>
    <data>Duel_FriendlyEnd.json</data>
    <jobString>Deafeating [OTHER] in a duel!</jobString>
    <weaponFilter Class="AM.Reqs.True"/> <!-- Allow anything to do this. Duel logic will handle weapon filtering -->
    <handsVisibility>
      <li>
        <pawnIndex>0</pawnIndex>
        <showMainHand>true</showMainHand>
        <showAltHand>true</showAltHand>
      </li>
      <li>
        <pawnIndex>1</pawnIndex>
        <showMainHand>true</showMainHand>
        <showAltHand>true</showAltHand>
      </li>
    </handsVisibility>
  </AM.AnimDef>

</Defs>